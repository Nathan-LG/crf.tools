// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------
// Users and Groups
// ------------------------------------------------------

model User {
  id            String    @id @unique @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?

  groupId Int   @default(1)
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  accounts Account[]
  logs     Log[]

  authorizations Authorization[]
  authCreated    Authorization[] @relation("createdBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// ------------------------------------------------------
// Locks
// ------------------------------------------------------

model Lock {
  id          Int     @id @default(autoincrement())
  name        String
  nukiId      String  @unique
  phoneNumber String?

  logs           Log[]
  authorizations Authorization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------------------------------
// Authorizations
// ------------------------------------------------------

model Authorization {
  id     Int    @id @default(autoincrement())
  userId String
  lockId Int

  startAt DateTime?
  endAt   DateTime?

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], name: "createdBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id])
  lock Lock  @relation(fields: [lockId], references: [id])
  Log  Log[]
}

// ------------------------------------------------------
// Logs
// ------------------------------------------------------

model Log {
  id              Int      @id @default(autoincrement())
  userId          String
  lockId          Int
  authorizationId Int
  action          Int
  details         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  lock          Lock          @relation(fields: [lockId], references: [id])
  authorization Authorization @relation(fields: [authorizationId], references: [id])
}
