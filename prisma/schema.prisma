// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------
// Users and Groups
// ------------------------------------------------------

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean?
  image         String?
  groupId       Int       @default(0)
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// ------------------------------------------------------
// Locations and Items
// ------------------------------------------------------

model LocationType {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Location  Location[]
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  type        LocationType @relation(fields: [locationTypeId], references: [id])
  icon        String?

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  LocationItem   LocationItem[]
  locationTypeId Int
}

model Item {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  lotA        Int
  lotB        Int
  lotC        Int
  vpsp        Int

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LocationItem LocationItem[]
}

model LocationItem {
  locationId Int
  itemId     Int
  count      Int @default(0)

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  item     Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([locationId, itemId])
}
